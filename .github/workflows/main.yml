name: Generate Route Images for All Walls

on:
  push:
    branches:
      - main
    paths:
      - 'walls/**'
      - '.github/workflows/**'
      - '.github/scripts/**'
  workflow_dispatch:

jobs:
  list_walls:
    runs-on: ubuntu-latest
    outputs:
      walls_json: ${{ steps.get_walls.outputs.walls_json }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'List all wall directories'
        id: get_walls
        run: |
          WALLS=$(find walls -mindepth 1 -maxdepth 1 -type d | jq -R . | jq -cs .)
          echo "walls_json=$WALLS" >> $GITHUB_OUTPUT

  build:
    needs: list_walls
    if: fromJson(needs.list_walls.outputs.walls_json)[0] != null
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        wall_dir: ${{ fromJson(needs.list_walls.outputs.walls_json) }}
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Set up Python 3.9'
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: 'Cache Pip dependencies'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      # --- 核心修改点 1: 在 build 作业中安装 imagemagick ---
      - name: 'Install dependencies'
        run: |
          # 安装 Python 依赖
          python -m pip install --upgrade pip
          pip install --upgrade "Pillow>=9.2.0"
          pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
          pip install numpy opencv-python-headless easyocr
          # 安装系统依赖
          echo "Installing ImageMagick..."
          sudo apt-get update
          sudo apt-get install -y imagemagick
          echo "ImageMagick installed."

      - name: 'Download and Prepare Fonts'
        run: |
          # 创建 fonts 目录
          mkdir -p fonts
          
          # 下载英文字体 Oswald (用于标题和手点标签)
          echo "Downloading Oswald font..."
          curl -L "https://github.com/google/fonts/raw/main/ofl/oswald/Oswald%5Bwght%5D.ttf" -o "fonts/Oswald-Variable.ttf"
          
          # 下载中文字体 Noto Sans SC (用于指导建议文本框)
          echo "Downloading Noto Sans SC font..."
          curl -L "https://github.com/google/fonts/raw/main/ofl/notosanssc/NotoSansSC-Regular.ttf" -o "fonts/NotoSansSC-Regular.ttf"
          
          echo "All fonts prepared successfully."
          
      - name: 'Step 1: Generate Hold Coordinates (if not exists)'
        run: |
          HOLDS_FILE="${{ matrix.wall_dir }}/output/data/holds.json"
          if [ ! -f "$HOLDS_FILE" ]; then
            echo "File '$HOLDS_FILE' not found. Generating..."
            python .github/scripts/generate_coords.py --image_path "${{ matrix.wall_dir }}/image_marked.png" --output_path "$HOLDS_FILE"
          else
            echo "File '$HOLDS_FILE' already exists. Skipping generation."
          fi

      - name: 'Step 2: Draw All Route Images'
        run: |
          python .github/scripts/draw_route.py --routes_database_file "${{ matrix.wall_dir }}/routes.json" --holds_coords_path "${{ matrix.wall_dir }}/output/data/holds.json" --base_image_path "${{ matrix.wall_dir }}/image_base.png" --output_dir "${{ matrix.wall_dir }}/output/generated_routes"

      # --- 核心修改点 2: 生成后立刻缩放图片 ---
      - name: 'Step 2.1: Resize generated route images'
        run: |
          ROUTE_DIR="${{ matrix.wall_dir }}/output/generated_routes"
          if [ -d "$ROUTE_DIR" ] && [ -n "$(ls -A "$ROUTE_DIR")" ]; then
            echo "Resizing images in $ROUTE_DIR to 50%..."
            # -quality 85 会在缩放的同时进行有损压缩，进一步减小文件体积
            find "$ROUTE_DIR" -name "*.png" -exec mogrify -resize 50% -quality 85 {} +
            echo "Image resizing and compression complete."
          else
            echo "No images found in $ROUTE_DIR to resize."
          fi

      - name: 'Step 3: Generate debug image'
        run: python .github/scripts/mark_all_holds.py --wall_dir "${{ matrix.wall_dir }}"

      - name: 'Step 4: Check for missing holds'
        run: python .github/scripts/check_missing_holds.py "${{ matrix.wall_dir }}"

      - name: 'Create sanitized artifact name'
        id: sanitize_name
        run: |
          ARTIFACT_NAME="generated-output-for-${{ matrix.wall_dir }}"
          echo "name=${ARTIFACT_NAME//\//-}" >> $GITHUB_OUTPUT

      - name: 'Upload generated output'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_name.outputs.name }}
          path: ${{ matrix.wall_dir }}/output/
          retention-days: 1

  commit_and_package:
    needs: build
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Download all generated outputs'
        uses: actions/download-artifact@v4
        with:
          path: temp-artifacts/

      - name: 'Move artifacts to correct locations'
        run: |
          for dir in temp-artifacts/*; do
            if [ -d "$dir" ]; then
              dirty_path=$(basename "$dir" | sed -e 's/generated-output-for-//')
              original_path=$(echo "$dirty_path" | sed 's/-/\//')
              echo "Merging files from $dir to $original_path/output"
              mkdir -p "$original_path/output"
              cp -a "$dir"/. "$original_path/output/"
            fi
          done

      - name: 'Pull latest changes from main'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull origin main --rebase --autostash

      - name: 'Step 5: Commit all generated files'
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(walls): Auto-generate route and debug images"
          file_pattern: "walls/"
          
      # --- 核心修改点 3: 简化打包步骤，不再需要图片处理 ---
      - name: 'Step 6: Compress all route images into a single ZIP'
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: |
          mkdir -p all_routes_packaged
          find walls -type d -name "generated_routes" | while read -r dir; do
            if [ -n "$(ls -A "$dir")" ]; then
              wall_name=$(basename "$(dirname "$(dirname "$dir")")")
              cp -r "$dir" "all_routes_packaged/${wall_name}_routes"
            fi
          done
          
          if [ -n "$(ls -A "all_routes_packaged")" ]; then
            zip -r climbing_routes_all_walls.zip all_routes_packaged
            echo "ZIP_CREATED=true" >> $GITHUB_ENV
          else
            echo "No routes to package for zipping."
            echo "ZIP_CREATED=false" >> $GITHUB_ENV
          fi
          
      - name: 'Step 7: Upload All-Walls Route Images Artifact'
        if: steps.auto-commit-action.outputs.changes_detected == 'true' && env.ZIP_CREATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: climbing-routes-all-walls
          path: climbing_routes_all_walls.zip
