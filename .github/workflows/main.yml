name: Generate Route Images for Changed Walls

on:
  push:
    branches:
      - main
    paths:
      - 'walls/**'
      - '.github/workflows/**'
      - '.github/scripts/**'
  workflow_dispatch:

jobs:
  detect_changes:
    name: Detect Changed Walls
    runs-on: ubuntu-latest
    outputs:
      walls_json: ${{ steps.get_changed_walls.outputs.walls_json }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        # fetch-depth: 0 is required to get the full history for git diff
        with:
          fetch-depth: 0

      - name: 'Get changed wall directories'
        id: get_changed_walls
        run: |
          # --- Logic to determine which walls to process ---
          
          # 1. Default to an empty list
          CHANGED_WALLS_LIST="[]"
          
          # 2. For manual triggers (workflow_dispatch), or if common scripts/workflows change, process ALL walls.
          # We get the list of all changed files between the last two commits.
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Workflow was manually dispatched, processing all walls."
            CHANGED_WALLS_LIST=$(find walls -mindepth 1 -maxdepth 1 -type d | jq -R . | jq -sc .)
          else
            # Get list of changed files for the push event
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
            
            # Check if any common script or the workflow file itself has changed
            if echo "$CHANGED_FILES" | grep -q -E '(\.github/scripts/|\.github/workflows/)'; then
              echo "Common scripts or workflow changed, processing all walls."
              CHANGED_WALLS_LIST=$(find walls -mindepth 1 -maxdepth 1 -type d | jq -R . | jq -sc .)
            else
              echo "Detecting changes only within wall directories..."
              # Filter for changed files under 'walls/', extract the wall directory, and get a unique list
              CHANGED_WALLS_LIST=$(echo "$CHANGED_FILES" | grep -oE 'walls/[^/]+' | sort -u | jq -R . | jq -sc .)
            fi
          fi
          
          echo "List of walls to process: $CHANGED_WALLS_LIST"
          echo "walls_json=$CHANGED_WALLS_LIST" >> $GITHUB_OUTPUT

  build:
    needs: detect_changes
    # Only run this job if the list of walls to process is not empty
    if: fromJson(needs.detect_changes.outputs.walls_json)[0] != null
    name: Generate for ${{ matrix.wall_dir }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # The matrix is now dynamically populated by the output of the 'detect_changes' job
        wall_dir: ${{ fromJson(needs.detect_changes.outputs.walls_json) }}
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Set up Python 3.9'
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: 'Cache Pip dependencies'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade "Pillow>=9.2.0"
          pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
          pip install numpy opencv-python-headless easyocr
          sudo apt-get update && sudo apt-get install -y imagemagick

      - name: 'Download and Prepare Font'
        run: |
          mkdir -p fonts
          curl -L "https://github.com/google/fonts/raw/main/ofl/oswald/Oswald%5Bwght%5D.ttf" -o "fonts/Oswald-Variable.ttf"
      
      - name: 'Step 1: Generate Hold Coordinates (if not exists)'
        run: |
          HOLDS_FILE="${{ matrix.wall_dir }}/output/data/holds.json"
          if [ ! -f "$HOLDS_FILE" ]; then
            echo "File '$HOLDS_FILE' not found. Generating..."
            python .github/scripts/generate_coords.py --image_path "${{ matrix.wall_dir }}/image_marked.png" --output_path "$HOLDS_FILE"
          else
            echo "File '$HOLDS_FILE' already exists. Skipping generation."
          fi

      - name: 'Step 2: Draw All Route Images'
        run: |
          python .github/scripts/draw_route.py --routes_database_file "${{ matrix.wall_dir }}/routes.json" --holds_coords_path "${{ matrix.wall_dir }}/output/data/holds.json" --base_image_path "${{ matrix.wall_dir }}/image.png" --font_path "fonts/Oswald-Variable.ttf" --output_dir "${{ matrix.wall_dir }}/output/generated_routes"

      - name: 'Step 2.1: Resize generated route images'
        run: |
          ROUTE_DIR="${{ matrix.wall_dir }}/output/generated_routes"
          if [ -d "$ROUTE_DIR" ] && [ -n "$(ls -A "$ROUTE_DIR")" ]; then
            echo "Resizing images in $ROUTE_DIR to 50%..."
            find "$ROUTE_DIR" -name "*.png" -exec mogrify -resize 50% -quality 85 {} +
            echo "Image resizing and compression complete."
          else
            echo "No images found in $ROUTE_DIR to resize."
          fi

      - name: 'Step 3: Generate debug image'
        run: python .github/scripts/mark_all_holds.py --wall_dir "${{ matrix.wall_dir }}"

      - name: 'Step 4: Check for missing holds'
        run: python .github/scripts/check_missing_holds.py "${{ matrix.wall_dir }}"

      - name: 'Create sanitized artifact name'
        id: sanitize_name
        run: |
          ARTIFACT_NAME="generated-output-for-${{ matrix.wall_dir }}"
          echo "name=${ARTIFACT_NAME//\//-}" >> $GITHUB_OUTPUT

      - name: 'Upload generated output'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_name.outputs.name }}
          path: ${{ matrix.wall_dir }}/output/
          retention-days: 1

  commit_and_package:
    needs: build
    # This job will only run if the build job ran and succeeded.
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Download all generated outputs'
        uses: actions/download-artifact@v4
        with:
          path: temp-artifacts/

      - name: 'Move artifacts to correct locations'
        run: |
          # The git clean command removes any untracked files in the specific wall's output directory.
          # This is the key to preventing the merge conflict. It ensures we start with a clean slate
          # for the directories we are about to update.
          echo "Cleaning generated file directories before applying new artifacts..."
          for dir in temp-artifacts/*; do
            if [ -d "$dir" ]; then
              dirty_path=$(basename "$dir" | sed -e 's/generated-output-for-//')
              original_path=$(echo "$dirty_path" | sed 's/-/\//')
              
              # Clean the target directories before copying over the new files
              git clean -fdx "$original_path/output/generated_routes"
              git clean -fdx "$original_path/output/debug"
              
              echo "Merging files from $dir to $original_path/output"
              mkdir -p "$original_path/output"
              # Use cp -a to preserve file attributes, and . to copy contents
              cp -a "$dir/." "$original_path/output/"
            fi
          done

      - name: 'Pull latest changes from main'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Autostash is still a good safety measure, but conflicts should no longer happen
          git pull origin main --rebase --autostash

      - name: 'Step 5: Commit all generated files'
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(walls): Auto-generate route and debug images"
          file_pattern: "walls/"
          
      - name: 'Step 6: Compress all route images into a single ZIP'
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: |
          mkdir -p all_routes_packaged
          find walls -type d -name "generated_routes" | while read -r dir; do
            if [ -n "$(ls -A "$dir")" ]; then
              wall_name=$(basename "$(dirname "$(dirname "$dir")")")
              cp -r "$dir" "all_routes_packaged/${wall_name}_routes"
            fi
          done
          
          if [ -n "$(ls -A "all_routes_packaged")" ]; then
            zip -r climbing_routes_all_walls.zip all_routes_packaged
            echo "ZIP_CREATED=true" >> $GITHUB_ENV
          else
            echo "No routes to package for zipping."
            echo "ZIP_CREATED=false" >> $GITHUB_ENV
          fi
          
      - name: 'Step 7: Upload All-Walls Route Images Artifact'
        if: steps.auto-commit-action.outputs.changes_detected == 'true' && env.ZIP_CREATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: climbing-routes-all-walls
          path: climbing_routes_all_walls.zip
