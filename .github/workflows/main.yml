name: Generate Route Images for All Walls

on:
  push:
    branches:
      - main
    paths:
      - 'walls/**'
      - '.github/workflows/**'
      - '.github/scripts/**'
  workflow_dispatch:

jobs:
  list_walls:
    runs-on: ubuntu-latest
    outputs:
      walls_json: ${{ steps.get_walls.outputs.walls_json }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'List all wall directories'
        id: get_walls
        run: |
          WALLS=$(find walls -mindepth 1 -maxdepth 1 -type d | jq -R . | jq -cs .)
          echo "Found walls: $WALLS"
          echo "walls_json=$WALLS" >> $GITHUB_OUTPUT

  build_and_draw_per_wall:
    needs: list_walls
    if: fromJson(needs.list_walls.outputs.walls_json)[0] != null
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        wall_dir: ${{ fromJson(needs.list_walls.outputs.walls_json) }}
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Set up Python 3.9'
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: 'Cache Pip dependencies'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade "Pillow>=9.2.0"
          pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu
          pip install numpy opencv-python-headless easyocr
      - name: 'Download and Prepare Font'
        run: |
          mkdir -p fonts
          curl -L "https://github.com/google/fonts/raw/main/ofl/oswald/Oswald%5Bwght%5D.ttf" -o "fonts/Oswald-Variable.ttf"
      
      - name: 'Step 1-4: Generate all files for ${{ matrix.wall_dir }}'
        run: |
          python .github/scripts/generate_coords.py --image_path "${{ matrix.wall_dir }}/image_marked.png" --output_path "${{ matrix.wall_dir }}/output/data/holds.json"
          python .github/scripts/draw_route.py --routes_database_file "${{ matrix.wall_dir }}/routes.json" --holds_coords_path "${{ matrix.wall_dir }}/output/data/holds.json" --base_image_path "${{ matrix.wall_dir }}/image_base.png" --output_dir "${{ matrix.wall_dir }}/output/generated_routes"
          python .github/scripts/mark_all_holds.py --wall_dir "${{ matrix.wall_dir }}"
          python .github/scripts/check_missing_holds.py "${{ matrix.wall_dir }}"

      # --- 核心修复点 1: 上传每个墙的产出 ---
      - name: 'Upload generated output for ${{ matrix.wall_dir }}'
        uses: actions/upload-artifact@v4
        with:
          name: generated-output-${{ matrix.wall_dir }}
          path: ${{ matrix.wall_dir }}/output/

  commit_and_package:
    needs: build_and_draw_per_wall
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- 核心修复点 2: 下载所有产出 ---
      - name: 'Download all generated outputs'
        uses: actions/download-artifact@v4
        with:
          # 使用通配符下载所有以 'generated-output-' 开头的产物
          pattern: generated-output-walls-*
          path: walls/
          merge-multiple: true # 将所有下载的产物合并到 walls/ 目录下

      - name: 'Step 5: Commit all generated files'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(walls): Auto-generate route and debug images"
          file_pattern: "walls/**/output/"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          
      - name: 'Step 6: Compress all route images into a single ZIP'
        run: |
          mkdir -p all_routes_packaged
          find walls -type d -name "generated_routes" | while read -r dir; do
            if [ -n "$(ls -A "$dir")" ]; then
              wall_name=$(basename "$(dirname "$(dirname "$dir")")")
              cp -r "$dir" "all_routes_packaged/${wall_name}_routes"
            fi
          done
          if [ -n "$(ls -A "all_routes_packaged")" ]; then
            zip -r climbing_routes_all_walls.zip all_routes_packaged
            echo "ZIP_CREATED=true" >> $GITHUB_ENV
          else
            echo "No routes to package."
            echo "ZIP_CREATED=false" >> $GITHUB_ENV
          fi
          
      - name: 'Step 7: Upload All-Walls Route Images Artifact'
        if: env.ZIP_CREATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: climbing-routes-all-walls
          path: climbing_routes_all_walls.zip
