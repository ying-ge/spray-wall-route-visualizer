name: Visualize Climbing Routes

on:
  push:
    paths:
      - 'images/**'
      - 'routes/**'
      - 'route_visualizer.py'
      - 'hold_detector.py'
  workflow_dispatch:
    inputs:
      image_path:
        description: '攀岩墙照片路径'
        required: true
        default: 'images/spray_wall.jpg'
      config_path:
        description: '路线配置文件路径'
        required: true
        default: 'routes/example_route.json'
      auto_detect:
        description: '是否自动检测岩点'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  visualize:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install opencv-python-headless numpy
          
      - name: 创建目录结构
        run: |
          mkdir -p images/output
          mkdir -p routes
          mkdir -p detections
          
      - name: 自动检测岩点(手动触发)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_detect == 'true' }}
        run: |
          python hold_detector.py --image ${{ github.event.inputs.image_path }} --output detections/auto_detected_holds.json --debug images/output/detected_holds_debug.jpg
          
      - name: 自动检测岩点(推送新图片时)
        if: ${{ github.event_name == 'push' }}
        run: |
          # 检查是否有新的图片文件
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "^images/.*\.(jpg|jpeg|png)$" > changed_images.txt
          if [ -s changed_images.txt ]; then
            while IFS= read -r image_path; do
              echo "处理新图片: $image_path"
              # 提取文件名(不包括扩展名)
              filename=$(basename "$image_path" | sed 's/\.[^.]*$//')
              # 运行岩点检测
              python hold_detector.py --image "$image_path" --output "detections/${filename}_holds.json" --debug "images/output/${filename}_detected.jpg"
            done < changed_images.txt
          fi
          
      - name: 运行可视化脚本(手动触发)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # 如果自动检测了岩点，就使用自动检测结果，否则使用指定的配置
          if [ "${{ github.event.inputs.auto_detect }}" == "true" ] && [ -f "detections/auto_detected_holds.json" ]; then
            python route_visualizer.py --image ${{ github.event.inputs.image_path }} --config detections/auto_detected_holds.json --output images/output/route_output.jpg
          else
            python route_visualizer.py --image ${{ github.event.inputs.image_path }} --config ${{ github.event.inputs.config_path }} --output images/output/route_output.jpg
          fi
          
      - name: 运行可视化脚本(自动触发)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          # 处理推送的配置文件
          for config in routes/*.json; do
            if [ -f "$config" ]; then
              filename=$(basename "$config" .json)
              image_path="images/${filename}.jpg"
              
              # 检查对应的图片是否存在，如果不存在则使用默认图片
              if [ ! -f "$image_path" ]; then
                image_path="images/spray_wall.jpg"
              fi
              
              if [ -f "$image_path" ]; then
                python route_visualizer.py --image "$image_path" --config "$config" --output "images/output/${filename}_route.jpg"
              fi
            fi
          done
          
          # 处理自动检测的岩点配置
          for config in detections/*_holds.json; do
            if [ -f "$config" ]; then
              filename=$(basename "$config" _holds.json)
              image_path="images/${filename}.jpg"
              
              if [ -f "$image_path" ]; then
                python route_visualizer.py --image "$image_path" --config "$config" --output "images/output/${filename}_auto_route.jpg"
              fi
            fi
          done
          
      - name: 上传生成的图片
        uses: actions/upload-artifact@v3
        with:
          name: route-visualizations
          path: images/output/
          
      - name: 上传检测到的岩点数据
        uses: actions/upload-artifact@v3
        with:
          name: detected-holds
          path: detections/
          
      - name: 提交生成的图片和岩点数据到仓库
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add images/output/ detections/
          git commit -m "自动生成路线可视化图片和岩点检测数据" || echo "没有更改需要提交"
          git push
