name: Visualize Climbing Routes

on:
  push:
    paths:
      - 'gallery/**'
      - 'routes/**'
      - '.github/scripts/**'
  workflow_dispatch:
    inputs:
      image_path:
        description: '攀岩墙照片路径'
        required: true
        default: 'gallery/spray_wall.png'
      config_path:
        description: '路线配置文件路径'
        required: false
        default: ''
      auto_detect:
        description: '是否自动检测岩点'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      ai_route:
        description: '是否请求AI定线'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      difficulty:
        description: '期望的路线难度(V1-V15，或不填)'
        required: false
        default: ''
      climber_height:
        description: '攀岩者身高(厘米，或不填)'
        required: false
        default: ''

jobs:
  visualize:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install opencv-python-headless numpy requests
          
      - name: 创建目录结构
        run: |
          mkdir -p gallery/output
          mkdir -p routes
          mkdir -p detections
          
      - name: 自动检测岩点(手动触发)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_detect == 'true' }}
        run: |
          python .github/scripts/hold_detector.py --image ${{ github.event.inputs.image_path }} --output detections/auto_detected_holds.json --debug gallery/output/detected_holds_debug.jpg
          
      - name: 自动检测岩点(推送新图片时)
        if: ${{ github.event_name == 'push' }}
        run: |
          # 检查是否有新的图片文件
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "^gallery/.*\.(jpg|jpeg|png)$" > changed_images.txt
          if [ -s changed_images.txt ]; then
            while IFS= read -r image_path; do
              echo "处理新图片: $image_path"
              # 提取文件名(不包括扩展名)
              filename=$(basename "$image_path" | sed 's/\.[^.]*$//')
              # 运行岩点检测
              python .github/scripts/hold_detector.py --image "$image_path" --output "detections/${filename}_holds.json" --debug "gallery/output/${filename}_detected.jpg"
            done < changed_images.txt
          fi
          
      - name: 请求AI定线(手动触发)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.auto_detect == 'true' && github.event.inputs.ai_route == 'true' }}
        run: |
          python .github/scripts/ai_route_designer.py --holds detections/auto_detected_holds.json --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --difficulty "${{ github.event.inputs.difficulty }}" --height "${{ github.event.inputs.climber_height }}" --token ${{ secrets.GITHUB_TOKEN }}
          
      - name: 请求AI定线(推送新检测结果时)
        if: ${{ github.event_name == 'push' }}
        run: |
          # 检查是否有新的检测结果
          for holds_file in detections/*_holds.json; do
            if [ -f "$holds_file" ]; then
              # 检查是否已经存在对应的AI路线
              filename=$(basename "$holds_file" _holds.json)
              if [ ! -f "routes/${filename}_ai_route.json" ]; then
                echo "为 $filename 请求AI定线"
                python .github/scripts/ai_route_designer.py --holds "$holds_file" --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }} --token ${{ secrets.GITHUB_TOKEN }}
              fi
            fi
          done
          
      - name: 运行可视化脚本(手动触发)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          # 确定配置文件路径
          config_path=""
          
          # 如果指定了配置文件，则使用指定的
          if [ "${{ github.event.inputs.config_path }}" != "" ]; then
            config_path="${{ github.event.inputs.config_path }}"
          # 如果自动检测了岩点且请求AI定线，使用AI路线模板
          elif [ "${{ github.event.inputs.auto_detect }}" == "true" ] && [ "${{ github.event.inputs.ai_route }}" == "true" ]; then
            # 尝试使用AI路线（如果存在）
            image_name=$(basename "${{ github.event.inputs.image_path }}" | sed 's/\.[^.]*$//')
            if [ -f "routes/${image_name}_ai_route.json" ]; then
              config_path="routes/${image_name}_ai_route.json"
            else
              config_path="detections/auto_detected_holds.json"
            fi
          # 如果只自动检测岩点，使用检测结果
          elif [ "${{ github.event.inputs.auto_detect }}" == "true" ]; then
            config_path="detections/auto_detected_holds.json"
          fi
          
          # 如果确定了配置路径，运行可视化
          if [ "$config_path" != "" ]; then
            python .github/scripts/route_visualizer.py --image ${{ github.event.inputs.image_path }} --config "$config_path" --output gallery/output/route_output.jpg
          else
            echo "无法确定配置文件路径，跳过可视化"
          fi
          
      - name: 运行可视化脚本(自动触发)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          # 处理推送的配置文件
          for config in routes/*.json; do
            if [ -f "$config" ]; then
              filename=$(basename "$config" .json)
              
              # 确定对应的图片路径
              base_filename=$(echo "$filename" | sed 's/_ai_route$//')
              image_path="gallery/${base_filename}.jpg"
              if [ ! -f "$image_path" ]; then
                image_path="gallery/${base_filename}.png"
              fi
              
              # 如果找不到对应图片，使用默认图片
              if [ ! -f "$image_path" ]; then
                image_path="gallery/spray_wall.png"
                if [ ! -f "$image_path" ]; then
                  image_path=$(find gallery -name "*.jpg" -o -name "*.png" | head -1)
                fi
              fi
              
              if [ -f "$image_path" ]; then
                python .github/scripts/route_visualizer.py --image "$image_path" --config "$config" --output "gallery/output/${filename}_route.jpg"
              fi
            fi
          done
          
          # 处理自动检测的岩点配置
          for config in detections/*_holds.json; do
            if [ -f "$config" ]; then
              filename=$(basename "$config" _holds.json)
              
              # 查找对应的图片
              image_path="gallery/${filename}.jpg"
              if [ ! -f "$image_path" ]; then
                image_path="gallery/${filename}.png"
              fi
              
              if [ -f "$image_path" ]; then
                python .github/scripts/route_visualizer.py --image "$image_path" --config "$config" --output "gallery/output/${filename}_auto_route.jpg"
              fi
            fi
          done
          
      - name: 上传生成的图片
        uses: actions/upload-artifact@v4
        with:
          name: route-visualizations
          path: gallery/output/
          
      - name: 上传检测到的岩点数据
        uses: actions/upload-artifact@v4
        with:
          name: detected-holds
          path: detections/
          
      - name: 提交生成的图片和岩点数据到仓库
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add gallery/output/ detections/ routes/
          git commit -m "自动生成路线可视化图片和岩点检测数据" || echo "没有更改需要提交"
          git push
